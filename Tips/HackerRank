import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Result {

    /*
     * Complete the 'droppedRequests' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts INTEGER_ARRAY requestTime as parameter.
     */

    public static int droppedRequests(List<Integer> requestTime) {
    // Write your code here
int[] A = getRequestFrequency(requestTime);
    int count1 = 0;
    int last10 = 0 ;
    int last60 = 0;
    for (int i = 0; i < A.length; i++) {
        if(i-10 >= 0){
            last10 -= A[i-10];
        }
        if(i-60 >= 0){
            last60 -= A[i-60];
        }
        last10 += A[i];
        last60 += A[i];
        int dropped = 0;
        int rem = A[i];
        if(A[i]>3){
            dropped += A[i] - 3;
            rem -= dropped;
        }
        if(last10 > 20) {
            int toDrop = last10 - 20;
            if(rem > toDrop) {
                dropped += toDrop;
                rem -= toDrop;
            }else {
                dropped += rem;
                rem = 0;
            }
        }
        if(last60 > 60) {
            int toDrop = last60 - 60;
            if(rem > toDrop) {
                dropped += toDrop;
                rem -= toDrop;
            }else {
                dropped += rem;
                rem = 0;
            }
        }
        count1 += dropped;
        A[i] = rem;
    }
    return count1;
    }
public static int[] getRequestFrequency(List<Integer> requestTime) {

    int lastElement = requestTime.get(requestTime.size() - 1);
    int[] result = new int[lastElement];
    for (Integer integer : requestTime) {
        result[integer - 1]++;
    }
    return result;
}
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int requestTimeCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> requestTime = IntStream.range(0, requestTimeCount).mapToObj(i -> {
            try {
                return bufferedReader.readLine().replaceAll("\\s+$", "");
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .map(String::trim)
            .map(Integer::parseInt)
            .collect(toList());

        int result = Result.droppedRequests(requestTime);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}


mport java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;


class Result {

    /*
     * Complete the 'minSum' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY num
     *  2. INTEGER k
     */

    public static int minSum(List<Integer> num, int k) {
    // Write your code here
  int[] nums = num.stream()
                            .mapToInt(Integer::intValue)
                            .toArray();
    int min =  Integer.MAX_VALUE, secondMin =  Integer.MAX_VALUE; 
    for (int j = 0; j < k; j++)  
    { 
  
        // If found new minimum 
        if (nums[j] < min) 
        { 
  
            // Minimum now becomes second minimum 
            secondMin = min; 
  
            // Update minimum 
            min = nums[j]; 
        } 
  
        // If current element is > min and < secondMin 
        else if ((nums[j] < secondMin) && nums[j] != min) 
  
            // Update secondMin 
            secondMin = nums[j]; 
    } 
  
    // Return the sum of the minimum pair 
    return (secondMin + min); 
    
    }

}
public class Solution {
